#!/usr/bin/env node

'use strict';

let app = require('../app');
let debug = require('debug')('untitled:server');
let http = require('http');
let https = require('https');
let fs = require('fs');
let env = require('process').env;

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

let server;
let proto;

let hasCerts = env["SSL_KEY_FILE"] && env["SSL_CRT_FILE"];
if (hasCerts) {
  let privateKey = fs.readFileSync(env["SSL_KEY_FILE"]);
  let certificate = fs.readFileSync(env["SSL_CRT_FILE"]);

  server = https.createServer({
    key: privateKey,
    cert: certificate
  }, app);
  proto = 'https';
} else {
  server = http.createServer(app);
  proto = 'http';
}
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    case 'ECONNREFUSED':
      console.error(bind + ' connection has been refused.');
      break;
    default:
      throw error;
  }
}

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : `${proto}://localhost:${addr.port}/`;
  console.log(`Listening on ${bind}`);
}
